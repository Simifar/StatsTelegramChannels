import os
import asyncio
import pytz
from datetime import datetime, timedelta
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from dotenv import load_dotenv
from telethon import TelegramClient
from metrics_calculator import fetch_messages_in_period, calculate_metrics
from telegram_utils import authenticate_client

load_dotenv()

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
API_ID = int(os.getenv("API_ID"))
API_HASH = os.getenv("API_HASH")
BOT_TOKEN = os.getenv("BOT_TOKEN")
PHONE_NUMBER = os.getenv("PHONE_NUMBER")
TZ_MOSCOW = pytz.timezone("Europe/Moscow")

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

async def collect_stats(client, channel_username, days_ago):
    """–°–±–æ—Ä —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –±–µ–∑ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è core.py"""
    try:
        entity = await client.get_entity(channel_username)
        period_end = datetime.now(TZ_MOSCOW)
        period_start = period_end - timedelta(days=days_ago)
        
        messages = await fetch_messages_in_period(
            client, entity, 
            period_start, 
            period_end, 
            TZ_MOSCOW
        )
        
        return await calculate_metrics(
            entity=entity,
            messages=messages,
            client=client,
            days_ago=days_ago,
            tz=TZ_MOSCOW
        )
        
    except Exception as e:
        raise e

@dp.message(Command("start"))
async def start(message: types.Message):
    await message.answer(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ Telegram-–∫–∞–Ω–∞–ª–æ–≤.\n"
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/stats <–∫–∞–Ω–∞–ª> <–¥–Ω–µ–π> - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ N –¥–Ω–µ–π\n"
        "/top_posts <–∫–∞–Ω–∞–ª> - —Ç–æ–ø-3 –ø–æ—Å—Ç–∞\n"
    )

@dp.message(Command("stats"))
async def get_stats(message: types.Message):
    try:
        args = message.text.split()
        if len(args) < 3:
            await message.answer("‚ùå –§–æ—Ä–º–∞—Ç: /stats <username_–∫–∞–Ω–∞–ª–∞> <–¥–Ω–µ–π>")
            return

        channel = args[1]
        days = int(args[2])

        async with TelegramClient('bot_session', API_ID, API_HASH) as client:
            await authenticate_client(client, PHONE_NUMBER)
            metrics = await collect_stats(client, channel, days)

            response = (
                f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ {days} –¥–Ω–µ–π:\n"
                f"üë• –ü–æ–¥–ø–∏—Å—á–∏–∫–∏: {metrics['subscribers']}\n"
                f"üìù –ü–æ—Å—Ç—ã: {metrics['total_posts']}\n"
                f"üëÄ –ü—Ä–æ—Å–º–æ—Ç—Ä—ã: {metrics['total_views']}\n"
                f"‚ù§Ô∏è –†–µ–∞–∫—Ü–∏–∏: {metrics['total_reactions']}\n"
                f"üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏: {metrics['total_comments']}\n"
                f"‚Ü©Ô∏è –†–µ–ø–æ—Å—Ç—ã: {metrics['total_forwards']}\n"
                f"üìà ER: {metrics['er_percent']}%\n"
                f"üéØ ERR: {metrics['err_percent']}%"
            )
            await message.answer(response)

    except ValueError:
        await message.answer("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ –¥–Ω–µ–π!")
    except Exception as e:
        await message.answer(f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {str(e)}")

async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())