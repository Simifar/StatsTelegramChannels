import streamlit as st
import asyncio
import nest_asyncio
from datetime import datetime, timedelta, time
import pytz
import pandas as pd
from telethon import TelegramClient
from telegram_utils import authenticate_client
from metrics_calculator import calculate_metrics, fetch_messages_in_period
from advanced_metrics import get_top_posts
from dotenv import load_dotenv
import os

load_dotenv()
nest_asyncio.apply()

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
API_ID = int(os.getenv("API_ID"))
API_HASH = os.getenv("API_HASH")
PHONE_NUMBER = os.getenv("PHONE_NUMBER")
TZ_MOSCOW = pytz.timezone("Europe/Moscow")

async def collect_stats(channels, period_start, period_end):
    client = None
    try:
        client = TelegramClient('streamlit_session', API_ID, API_HASH)
        await client.connect()
        
        if not await client.is_user_authorized():
            await authenticate_client(client, PHONE_NUMBER)
        
        metrics_all = []
        processed_channels = set()
        
        for channel_username in channels:
            if channel_username in processed_channels:
                continue
                
            try:
                entity = await client.get_entity(channel_username)
                messages = await fetch_messages_in_period(
                    client, entity, 
                    period_start, 
                    period_end, 
                    TZ_MOSCOW
                )
                
                # –ü–æ–ª—É—á–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏
                metrics = await calculate_metrics(
                    entity, messages, client,
                    start_date=period_start,
                    end_date=period_end,
                    tz=TZ_MOSCOW
                )
                
                # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ø –ø–æ—Å—Ç—ã
                top_posts = await get_top_posts(messages, client)
                
                metrics.update({
                    '–ö–∞–Ω–∞–ª': channel_username,
                    'top_posts': top_posts[:3] if top_posts else []
                })
                
                metrics_all.append(metrics)
                processed_channels.add(channel_username)
                
            except Exception as e:
                st.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ {channel_username}: {str(e)}")
                continue
                
        return metrics_all
        
    finally:
        if client and client.is_connected():
            await client.disconnect()

# –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å
st.set_page_config(page_title="Telegram Analytics", layout="wide")
st.title("üìä –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ Telegram-–∫–∞–Ω–∞–ª–æ–≤")

# –ó–∞–≥—Ä—É–∑–∫–∞ –∫–∞–Ω–∞–ª–æ–≤
with open('channels.txt', 'r', encoding='utf-8') as f:
    channels_list = [line.strip() for line in f if line.strip()]

channels = st.multiselect("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–Ω–∞–ª—ã", channels_list, default=channels_list)

# –í—ã–±–æ—Ä –ø–µ—Ä–∏–æ–¥–∞
period_choice = st.radio("–ü–µ—Ä–∏–æ–¥ –∞–Ω–∞–ª–∏–∑–∞:", ["–ü–æ—Å–ª–µ–¥–Ω–∏–µ N –¥–Ω–µ–π", "–î–∏–∞–ø–∞–∑–æ–Ω –¥–∞—Ç", "–ú–µ—Å—è—Ü"])
now = datetime.now(TZ_MOSCOW)

if period_choice == "–ü–æ—Å–ª–µ–¥–Ω–∏–µ N –¥–Ω–µ–π":
    days_ago = st.number_input("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π:", min_value=1, max_value=365, value=7)
    period_start = now - timedelta(days=days_ago)
    period_end = now
elif period_choice == "–î–∏–∞–ø–∞–∑–æ–Ω –¥–∞—Ç":
    start = st.date_input("–ù–∞—á–∞–ª–æ –ø–µ—Ä–∏–æ–¥–∞", now.date() - timedelta(days=7))
    end = st.date_input("–ö–æ–Ω–µ—Ü –ø–µ—Ä–∏–æ–¥–∞:", now.date())
    period_start = TZ_MOSCOW.localize(datetime.combine(start, time.min))
    period_end = TZ_MOSCOW.localize(datetime.combine(end, time.max))
elif period_choice == "–ú–µ—Å—è—Ü":
    month_choice = st.text_input("–ú–µ—Å—è—Ü (YYYY-MM)", now.strftime('%Y-%m'))
    year, month = map(int, month_choice.split('-'))
    period_start = TZ_MOSCOW.localize(datetime(year, month, 1))
    period_end = (period_start + timedelta(days=32)).replace(day=1) - timedelta(seconds=1)

def format_top_posts(posts):
    if not posts:
        return ["–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö"]
    return [
        f"{idx+1}. [–ü–æ—Å—Ç {p.get('id', '')}]({p['link']}) üëÄ{p['views']} ‚ù§Ô∏è{p['reactions']} üí¨{p['comments']}"
        for idx, p in enumerate(posts)
    ]

if st.button("üöÄ –°–æ–±—Ä–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"):
    with st.spinner("–ò–¥—ë—Ç —Å–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö..."):
        try:
            stats = asyncio.run(collect_stats(channels, period_start, period_end))
            if not stats:
                st.warning("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è")
                exit()
                
            # –§–æ—Ä–º–∏—Ä—É–µ–º DataFrame
            df = pd.DataFrame([{
                '–ö–∞–Ω–∞–ª': m['–ö–∞–Ω–∞–ª'],
                '–ü–æ–¥–ø–∏—Å—á–∏–∫–∏': m['subscribers'],
                '–ü–æ—Å—Ç—ã': m['total_posts'],
                '–ü—Ä–æ—Å–º–æ—Ç—Ä—ã': m['total_views'],
                '–†–µ–∞–∫—Ü–∏–∏': m['total_reactions'],
                '–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏': m['total_comments'],
                '–†–µ–ø–æ—Å—Ç—ã': m['total_forwards'],
                '–°—Ä–µ–¥–Ω–∏–π –æ—Ö–≤–∞—Ç': round(m['avg_reach'], 2),
                'ER': f"{m['er_percent']:.2f}%",
                'ERR': f"{m['err_percent']:.2f}%"
            } for m in stats])
            
            # –£–¥–∞–ª—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
            df = df.drop_duplicates(subset=['–ö–∞–Ω–∞–ª'])
            
            # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã
            st.subheader("üìå –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
            st.dataframe(df)

            # –≠–∫—Å–ø–æ—Ä—Ç
            st.subheader("üì§ –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö")
            csv = df.to_csv(index=False, sep=";").encode('utf-8-sig')
            st.download_button(
                label="–°–∫–∞—á–∞—Ç—å CSV",
                data=csv,
                file_name="telegram_stats.csv",
                mime="text/csv"
            )

            # –¢–æ–ø –ø–æ—Å—Ç—ã
            st.subheader("üî• –¢–æ–ø –ø–æ—Å—Ç—ã")
            for metric in stats:
                st.markdown(f"### üì¢ {metric['–ö–∞–Ω–∞–ª']}")
                posts = format_top_posts(metric['top_posts'])
                for post in posts:
                    st.markdown(post)
                    
        except Exception as e:
            st.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {str(e)}")